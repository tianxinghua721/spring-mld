#log4j.rootLogger=error,stdout,info,debug,error  
log4j.rootCategory=info,stdout,database  
log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%-5p] [%d{HH:mm:ss}] %c - %m%n 
#!!!!!!!!!!!!!!!! 配置数据库日志
#log4j.appender.database=org.apache.log4j.jdbc.jdbcappender
#log4j.appender.database.layout=org.apache.log4j.patternlayout
#log4j.appender.database.url=jdbc:mysql://127.0.0.1:3306/test?characterencoding=utf8
#log4j.appender.database.driver=com.mysql.jdbc.driver
#设置要将日志插入到数据库的驱动  
log4j.appender.database.threshold=info
#定义什么级别的错误将写入到数据库中  
log4j.appender.database.buffersize=1
log4j.appender.database.user=root
log4j.appender.database.password=woaics123
#格式备用
#log4j.appender.DATABASE.sql= INSERT INTO jt_config_log(LOG_LEVEL,LOG_TYPE,OPERATE_NAME,OPERATE_TIME,OPERATE_DES) VALUES('%p','%p','%c','%d{yyyy-MM-dd HH:mm:ss}','%m')

log4j.appender.database.sql=insert into jt_config_log(Class,Mothod,createTime,LogLevel,LogLine,MSG) values ('%C','%M','%d{yyyy-MM-dd HH:mm:ss}','%p','%l','%m')  
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL    
# %r 输出自应用启动到输出该log信息耗费的毫秒数    
# %c 输出所属的类目，通常就是所在类的全名    
# %t 输出产生该日志事件的线程名    
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”    
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921    
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)  

log4j.logger.com.mybatis3=DEBUG
log4j.logger.com.mld=DEBUG

#数据相关
drop table if jt_config_log exist;  
create table jt_config_log(  
  id int(11) not null auto_increment,  
  class varchar(255) default null,  
  mothod varchar(255) default null,  
  createtime varchar(255) default null,  
  loglevel varchar(20) default null,  
  logline varchar(255) default null,  
  msg varchar(555) default null,  
  primary key (id)  
) engine=innodb auto_increment=5 default charset=utf8;  


  
